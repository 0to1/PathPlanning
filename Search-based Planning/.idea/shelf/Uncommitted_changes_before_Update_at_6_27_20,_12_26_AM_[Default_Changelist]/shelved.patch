Index: ara_star.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import queue\nimport plotting\nimport env\n\nimport matplotlib.pyplot as plt\n\n\nclass AraStar:\n    def __init__(self, x_start, x_goal, heuristic_type):\n        self.xI, self.xG = x_start, x_goal\n        self.heuristic_type = heuristic_type\n\n        self.Env = env.Env()  # class Env\n\n        self.u_set = self.Env.motions  # feasible input set\n        self.obs = self.Env.obs  # position of obstacles\n\n        self.e = 2.5\n        self.g = {self.xI: 0, self.xG: float(\"inf\")}\n        self.fig_name = \"ARA_Star Algorithm\"\n\n        self.OPEN = queue.QueuePrior()  # priority queue / OPEN\n        self.CLOSED = []\n        self.INCONS = []\n        self.parent = {self.xI: self.xI}\n\n        self.path = []\n        self.visited = []\n\n    def searching(self):\n        self.OPEN.put(self.xI, self.fvalue(self.xI))\n        self.ImprovePath()\n        self.path.append(self.extract_path())\n\n        while self.update_e() > 1:\n            self.e -= 0.5\n            print(self.e)\n            OPEN_mid = [x for (p, x) in self.OPEN.enumerate()] + self.INCONS\n            self.OPEN = queue.QueuePrior()\n            self.OPEN.put(self.xI, self.fvalue(self.xI))\n\n            for x in OPEN_mid:\n                self.OPEN.put(x, self.fvalue(x))\n\n            self.INCONS = []\n            self.CLOSED = []\n            self.ImprovePath()\n            self.path.append(self.extract_path())\n\n        return self.path, self.visited\n\n    def ImprovePath(self):\n        visited_each = []\n        while (self.fvalue(self.xG) >\n               min([self.fvalue(x) for (p, x) in self.OPEN.enumerate()])):\n            s = self.OPEN.get()\n\n            if s not in self.CLOSED:\n                self.CLOSED.append(s)\n\n            for u_next in self.u_set:\n                s_next = tuple([s[i] + u_next[i] for i in range(len(s))])\n\n                if s_next not in self.obs:\n                    new_cost = self.g[s] + self.get_cost(s, u_next)\n                    if s_next not in self.g or new_cost < self.g[s_next]:\n                        self.g[s_next] = new_cost\n                        self.parent[s_next] = s\n                        visited_each.append(s_next)\n\n                        if s_next not in self.CLOSED:\n                            self.OPEN.put(s_next, self.fvalue(s_next))\n                        else:\n                            self.INCONS.append(s_next)\n\n        self.visited.append(visited_each)\n\n    def update_e(self):\n        c_OPEN, c_INCONS = float(\"inf\"), float(\"inf\")\n\n        if not self.OPEN.empty():\n            c_OPEN = min(self.g[x] + self.Heuristic(x) for (p, x) in self.OPEN.enumerate())\n\n        if len(self.INCONS) != 0:\n            c_INCONS = min(self.g[x] + self.Heuristic(x) for x in self.INCONS)\n\n        if min(c_OPEN, c_INCONS) == float(\"inf\"):\n            return 1\n\n        return min(self.e, self.g[self.xG] / min(c_OPEN, c_INCONS))\n\n    def fvalue(self, x):\n        h = self.e * self.Heuristic(x)\n        return self.g[x] + h\n\n    def extract_path(self):\n        \"\"\"\n        Extract the path based on the relationship of nodes.\n\n        :param policy: Action needed for transfer between two nodes\n        :return: The planning path\n        \"\"\"\n\n        path_back = [self.xG]\n        x_current = self.xG\n\n        while True:\n            x_current = self.parent[x_current]\n            path_back.append(x_current)\n\n            if x_current == self.xI:\n                break\n\n        return list(path_back)\n\n    @staticmethod\n    def get_cost(x, u):\n        \"\"\"\n        Calculate cost for this motion\n\n        :param x: current node\n        :param u: input\n        :return:  cost for this motion\n        :note: cost function could be more complicate!\n        \"\"\"\n\n        return 1\n\n    def Heuristic(self, state):\n        \"\"\"\n        Calculate heuristic.\n        :param state: current node (state)\n        :param goal: goal node (state)\n        :param heuristic_type: choosing different heuristic functions\n        :return: heuristic\n        \"\"\"\n\n        heuristic_type = self.heuristic_type\n        goal = self.xG\n\n        if heuristic_type == \"manhattan\":\n            return abs(goal[0] - state[0]) + abs(goal[1] - state[1])\n        elif heuristic_type == \"euclidean\":\n            return ((goal[0] - state[0]) ** 2 + (goal[1] - state[1]) ** 2) ** (1 / 2)\n        else:\n            print(\"Please choose right heuristic type!\")\n\n\ndef main():\n    x_start = (5, 5)  # Starting node\n    x_goal = (49, 5)  # Goal node\n\n    arastar = AraStar(x_start, x_goal, \"manhattan\")\n    plot = plotting.Plotting(x_start, x_goal)\n\n    fig_name = \"ARA* algorithm\"\n    path, visited = arastar.searching()\n\n    plot.animation_ara_star(path, visited, fig_name)\n\n\nif __name__ == '__main__':\n    main()\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ara_star.py	(revision 3a87e5d5770f7a88af23b1cf0cf579c63bb5f346)
+++ ara_star.py	(date 1593242576435)
@@ -2,8 +2,6 @@
 import plotting
 import env
 
-import matplotlib.pyplot as plt
-
 
 class AraStar:
     def __init__(self, x_start, x_goal, heuristic_type):
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"BranchesTreeState\">\n    <expand>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n      <path>\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\n      </path>\n    </expand>\n    <select />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"025aff36-a6aa-4945-ab7e-b2c625055f47\" name=\"Default Changelist\" comment=\"\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/ara_star.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/ara_star.py\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/plotting.py\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/plotting.py\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\n  </component>\n  <component name=\"ProjectId\" id=\"1dQBIivqkvFljqtAc1O2MqInYWf\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\n    <property name=\"restartRequiresConfirmation\" value=\"false\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable\" />\n  </component>\n  <component name=\"RunManager\" selected=\"Python.ara_star\">\n    <configuration name=\"a_star\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\n      <module name=\"Search-based Planning\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/a_star.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"ara_star\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\" nameIsGenerated=\"true\">\n      <module name=\"Search-based Planning\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/ara_star.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"bfs\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\n      <module name=\"Search-based Planning\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/bfs.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"dfs\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\n      <module name=\"Search-based Planning\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/dfs.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <configuration name=\"dijkstra\" type=\"PythonConfigurationType\" factoryName=\"Python\" temporary=\"true\">\n      <module name=\"Search-based Planning\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <envs>\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\n      </envs>\n      <option name=\"SDK_HOME\" value=\"\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/dijkstra.py\" />\n      <option name=\"PARAMETERS\" value=\"\" />\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\n      <option name=\"MODULE_MODE\" value=\"false\" />\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\n      <option name=\"INPUT_FILE\" value=\"\" />\n      <method v=\"2\" />\n    </configuration>\n    <recent_temporary>\n      <list>\n        <item itemvalue=\"Python.ara_star\" />\n        <item itemvalue=\"Python.a_star\" />\n        <item itemvalue=\"Python.bfs\" />\n        <item itemvalue=\"Python.dfs\" />\n        <item itemvalue=\"Python.dijkstra\" />\n      </list>\n    </recent_temporary>\n  </component>\n  <component name=\"SvnConfiguration\">\n    <configuration />\n  </component>\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"025aff36-a6aa-4945-ab7e-b2c625055f47\" name=\"Default Changelist\" comment=\"\" />\n      <created>1592347358698</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1592347358698</updated>\n    </task>\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\n  </component>\n  <component name=\"WindowStateProjectService\">\n    <state x=\"819\" y=\"314\" width=\"424\" height=\"482\" key=\"FileChooserDialogImpl\" timestamp=\"1592933974409\">\n      <screen x=\"65\" y=\"24\" width=\"1855\" height=\"1056\" />\n    </state>\n    <state x=\"2700\" y=\"297\" width=\"424\" height=\"482\" key=\"FileChooserDialogImpl/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1592802293738\" />\n    <state x=\"819\" y=\"314\" key=\"FileChooserDialogImpl/65.24.1855.1056/1920.0.1920.1080@65.24.1855.1056\" timestamp=\"1592933974409\" />\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1593242428508\">\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1080\" />\n    </state>\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.bottom/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1593242428508\" />\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.center\" timestamp=\"1593242428508\">\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1080\" />\n    </state>\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.center/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1593242428508\" />\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.left\" timestamp=\"1593242428508\">\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1080\" />\n    </state>\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.left/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1593242428508\" />\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.right\" timestamp=\"1593242428508\">\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1080\" />\n    </state>\n    <state width=\"1832\" height=\"206\" key=\"GridCell.Tab.0.right/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1593242428508\" />\n    <state x=\"2406\" y=\"174\" key=\"SettingsEditor\" timestamp=\"1592801555194\">\n      <screen x=\"1920\" y=\"0\" width=\"1920\" height=\"1080\" />\n    </state>\n    <state x=\"2406\" y=\"174\" key=\"SettingsEditor/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080\" timestamp=\"1592801555194\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 3a87e5d5770f7a88af23b1cf0cf579c63bb5f346)
+++ .idea/workspace.xml	(date 1593242779309)
@@ -20,9 +20,14 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="025aff36-a6aa-4945-ab7e-b2c625055f47" name="Default Changelist" comment="">
+      <change afterPath="$PROJECT_DIR$/Astar_3D/Astar3D.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Astar_3D/queue.py" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Astar_3D/utils3D.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../Sampling-based Planning/rrt_3D/rrtstar3D.py" beforeDir="false" afterPath="$PROJECT_DIR$/../Sampling-based Planning/rrt_3D/rrtstar3D.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/3D/env3D.py" beforeDir="false" afterPath="$PROJECT_DIR$/Astar_3D/env3D.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/3D/plot_util3D.py" beforeDir="false" afterPath="$PROJECT_DIR$/Astar_3D/plot_util3D.py" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/ara_star.py" beforeDir="false" afterPath="$PROJECT_DIR$/ara_star.py" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/plotting.py" beforeDir="false" afterPath="$PROJECT_DIR$/plotting.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -202,22 +207,22 @@
     </state>
     <state x="2700" y="297" width="424" height="482" key="FileChooserDialogImpl/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1592802293738" />
     <state x="819" y="314" key="FileChooserDialogImpl/65.24.1855.1056/1920.0.1920.1080@65.24.1855.1056" timestamp="1592933974409" />
-    <state width="1832" height="206" key="GridCell.Tab.0.bottom" timestamp="1593242428508">
+    <state width="1832" height="206" key="GridCell.Tab.0.bottom" timestamp="1593242677728">
       <screen x="1920" y="0" width="1920" height="1080" />
     </state>
-    <state width="1832" height="206" key="GridCell.Tab.0.bottom/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242428508" />
-    <state width="1832" height="206" key="GridCell.Tab.0.center" timestamp="1593242428508">
+    <state width="1832" height="206" key="GridCell.Tab.0.bottom/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242677728" />
+    <state width="1832" height="206" key="GridCell.Tab.0.center" timestamp="1593242677728">
       <screen x="1920" y="0" width="1920" height="1080" />
     </state>
-    <state width="1832" height="206" key="GridCell.Tab.0.center/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242428508" />
-    <state width="1832" height="206" key="GridCell.Tab.0.left" timestamp="1593242428508">
+    <state width="1832" height="206" key="GridCell.Tab.0.center/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242677728" />
+    <state width="1832" height="206" key="GridCell.Tab.0.left" timestamp="1593242677728">
       <screen x="1920" y="0" width="1920" height="1080" />
     </state>
-    <state width="1832" height="206" key="GridCell.Tab.0.left/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242428508" />
-    <state width="1832" height="206" key="GridCell.Tab.0.right" timestamp="1593242428508">
+    <state width="1832" height="206" key="GridCell.Tab.0.left/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242677728" />
+    <state width="1832" height="206" key="GridCell.Tab.0.right" timestamp="1593242677728">
       <screen x="1920" y="0" width="1920" height="1080" />
     </state>
-    <state width="1832" height="206" key="GridCell.Tab.0.right/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242428508" />
+    <state width="1832" height="206" key="GridCell.Tab.0.right/65.24.1855.1056/1920.0.1920.1080@1920.0.1920.1080" timestamp="1593242677728" />
     <state x="2406" y="174" key="SettingsEditor" timestamp="1592801555194">
       <screen x="1920" y="0" width="1920" height="1080" />
     </state>
Index: Astar_3D/queue.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Astar_3D/queue.py	(date 1593242505075)
+++ Astar_3D/queue.py	(date 1593242505075)
@@ -0,0 +1,62 @@
+import collections
+import heapq
+
+
+class QueueFIFO:
+    """
+    Class: QueueFIFO
+    Description: QueueFIFO is designed for First-in-First-out rule.
+    """
+
+    def __init__(self):
+        self.queue = collections.deque()
+
+    def empty(self):
+        return len(self.queue) == 0
+
+    def put(self, node):
+        self.queue.append(node)  # enter from back
+
+    def get(self):
+        return self.queue.popleft()  # leave from front
+
+
+class QueueLIFO:
+    """
+    Class: QueueLIFO
+    Description: QueueLIFO is designed for Last-in-First-out rule.
+    """
+
+    def __init__(self):
+        self.queue = collections.deque()
+
+    def empty(self):
+        return len(self.queue) == 0
+
+    def put(self, node):
+        self.queue.append(node)  # enter from back
+
+    def get(self):
+        return self.queue.pop()  # leave from back
+
+
+class QueuePrior:
+    """
+    Class: QueuePrior
+    Description: QueuePrior reorders elements using value [priority]
+    """
+
+    def __init__(self):
+        self.queue = []
+
+    def empty(self):
+        return len(self.queue) == 0
+
+    def put(self, item, priority):
+        heapq.heappush(self.queue, (priority, item))  # reorder x using priority
+
+    def get(self):
+        return heapq.heappop(self.queue)[1]  # pop out the smallest item
+
+    def enumerate(self):
+        return self.queue
Index: Astar_3D/Astar3D.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Astar_3D/Astar3D.py	(date 1593242505075)
+++ Astar_3D/Astar3D.py	(date 1593242505075)
@@ -0,0 +1,38 @@
+# this is the three dimensional A* algo
+# !/usr/bin/env python3
+# -*- coding: utf-8 -*-
+"""
+@author: yue qi
+"""
+import numpy as np
+
+import os
+import sys
+
+sys.path.append(os.path.dirname(os.path.abspath(__file__)) + "/../../Search-based Planning/")
+from Astar_3D.env3D import env
+from Astar_3D.utils3D import getAABB, getDist, getRay, StateSpace, Heuristic, getNearest
+import queue
+
+
+class Weighted_A_star(object):
+    def __init__(self):
+        self.Alldirec = np.array([[1 ,0,0],[0,1 ,0],[0,0, 1],[1 ,1 ,0],[1 ,0,1 ],[0, 1, 1],[ 1, 1, 1],\
+                      [-1,0,0],[0,-1,0],[0,0,-1],[-1,-1,0],[-1,0,-1],[0,-1,-1],[-1,-1,-1],\
+                      [1,-1,0],[-1,1,0],[1,0,-1],[-1,0, 1],[0,1, -1],[0, -1,1],\
+                      [1,-1,-1],[-1,1,-1],[-1,-1,1],[1,1,-1],[1,-1,1],[-1,1,1]])
+        self.env = env()
+        self.Space = StateSpace(self.env.boundary) # key is the point, store g value
+        self.OPEN = queue.QueuePrior() # store [point,priority]
+        self.start = getNearest(self.Space,self.env.start)
+        self.goal = getNearest(self.Space,self.env.goal)
+        self.h = Heuristic(self.Space,self.goal)
+        self.Parent = {}
+        self.CLOSED = {}
+        
+
+    def run(self):
+        pass
+if __name__ == '__main__':
+    Astar = Weighted_A_star()
+    
\ No newline at end of file
Index: ../Sampling-based Planning/rrt_3D/rrtstar3D.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\"\"\"\nThis is rrt star code for 3D\n@author: yue qi\n\"\"\"\nimport numpy as np\nfrom numpy.matlib import repmat\nfrom collections import defaultdict\nimport time\nimport matplotlib.pyplot as plt\n\nimport os\nimport sys\n\nsys.path.append(os.path.dirname(os.path.abspath(__file__)) + \"/../../Sampling-based Planning/\")\nfrom rrt_3D.env3D import env\nfrom rrt_3D.utils3D import getDist, sampleFree, nearest, steer, isCollide, near, visualization, cost, path, edgeset, hash3D, dehash\n\n\nclass rrtstar():\n    def __init__(self):\n        self.env = env()\n        self.Parent = {}\n        self.E = edgeset()\n        self.V = []\n        self.i = 0\n        self.maxiter = 4000 # at least 4000 in this env\n        self.stepsize = 0.5\n        self.gamma = 500\n        self.eta = 1.1*self.stepsize\n        self.Path = []\n        self.done = False\n\n    def wireup(self,x,y):\n        self.E.add_edge([x,y]) # add edge\n        self.Parent[hash3D(x)] = y\n\n    def removewire(self,xnear):\n        xparent = self.Parent[hash3D(xnear)]\n        a = [xnear,xparent]\n        self.E.remove_edge(a) # remove and replace old the connection\n\n    def reached(self):\n        self.done = True\n        xn = near(self,self.env.goal)\n        c = [cost(self,x) for x in xn]\n        xncmin = xn[np.argmin(c)]\n        self.wireup(self.env.goal,xncmin)\n        self.V.append(self.env.goal)\n        self.Path,self.D = path(self)\n\n    def run(self):\n        self.V.append(self.env.start)\n        self.ind = 0\n        xnew = self.env.start\n        print('start rrt*... ')\n        self.fig = plt.figure(figsize = (10,8))\n        while self.ind < self.maxiter:\n            xrand    = sampleFree(self)\n            xnearest = nearest(self,xrand)\n            xnew     = steer(self,xnearest,xrand)\n            if not isCollide(self,xnearest,xnew):\n                Xnear = near(self,xnew)\n                self.V.append(xnew) # add point\n                visualization(self)\n                # minimal path and minimal cost\n                xmin, cmin = xnearest, cost(self, xnearest) + getDist(xnearest, xnew)\n                # connecting along minimal cost path\n                for xnear in Xnear:\n                    c1 = cost(self, xnear) + getDist(xnew, xnear)\n                    if not isCollide(self, xnew, xnear) and c1 < cmin:\n                        xmin, cmin = xnear, c1\n                self.wireup(xnew, xmin)\n                # rewire\n                for xnear in Xnear:\n                    c2 = cost(self, xnew) + getDist(xnew, xnear)\n                    if not isCollide(self, xnew, xnear) and c2 < cost(self, xnear):\n                        self.removewire(xnear)\n                        self.wireup(xnear, xnew)\n                self.i += 1\n            self.ind += 1\n        # max sample reached\n        self.reached()\n        print('time used = ' + str(time.time()-starttime))\n        print('Total distance = '+str(self.D))\n        visualization(self)\n        plt.show()\n        \n\nif __name__ == '__main__':\n    p = rrtstar()\n    starttime = time.time()\n    p.run()\n    \n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../Sampling-based Planning/rrt_3D/rrtstar3D.py	(revision 3a87e5d5770f7a88af23b1cf0cf579c63bb5f346)
+++ ../Sampling-based Planning/rrt_3D/rrtstar3D.py	(date 1593242505075)
@@ -23,7 +23,7 @@
         self.E = edgeset()
         self.V = []
         self.i = 0
-        self.maxiter = 4000 # at least 4000 in this env
+        self.maxiter = 10000 # at least 4000 in this env
         self.stepsize = 0.5
         self.gamma = 500
         self.eta = 1.1*self.stepsize
@@ -61,7 +61,7 @@
             if not isCollide(self,xnearest,xnew):
                 Xnear = near(self,xnew)
                 self.V.append(xnew) # add point
-                visualization(self)
+                # visualization(self)
                 # minimal path and minimal cost
                 xmin, cmin = xnearest, cost(self, xnearest) + getDist(xnearest, xnew)
                 # connecting along minimal cost path
Index: Astar_3D/utils3D.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- Astar_3D/utils3D.py	(date 1593242505075)
+++ Astar_3D/utils3D.py	(date 1593242505075)
@@ -0,0 +1,66 @@
+import numpy as np
+
+def getRay(x, y):
+    direc = [y[0] - x[0], y[1] - x[1], y[2] - x[2]]
+    return np.array([x, direc])
+
+def getAABB(blocks):
+    AABB = []
+    for i in blocks:
+        AABB.append(np.array([np.add(i[0:3], -0), np.add(i[3:6], 0)]))  # make AABBs alittle bit of larger
+    return AABB
+
+def getDist(pos1, pos2):
+    return np.sqrt(sum([(pos1[0] - pos2[0]) ** 2, (pos1[1] - pos2[1]) ** 2, (pos1[2] - pos2[2]) ** 2]))
+
+def getNearest(Space,pt):
+    '''get the nearest point on the grid'''
+    mindis,minpt = 1000,None
+    for strpts in Space.keys(): 
+        pts = dehash(strpts)
+        dis = getDist(pts,pt)
+        if dis < mindis:
+            mindis,minpt = dis,pts
+    return minpt
+
+def Heuristic(Space,t):
+    '''Max norm distance'''
+    h = {}
+    for k in Space.keys():
+        h[k] = max(abs(t-dehash(k)))
+    return h
+
+def hash3D(x):
+    return str(x[0])+' '+str(x[1])+' '+str(x[2])
+
+def dehash(x):
+    return np.array([float(i) for i in x.split(' ')])
+
+def isinbound(i, x):
+    if i[0] <= x[0] < i[3] and i[1] <= x[1] < i[4] and i[2] <= x[2] < i[5]:
+        return True
+    return False
+
+def StateSpace(boundary,factor=0):
+    '''This function is used to get nodes and discretize the space.
+       State space is by x*y*z,3 where each 3 is a point in 3D.'''
+    xmin,xmax = boundary[0]+factor,boundary[3]-factor
+    ymin,ymax = boundary[1]+factor,boundary[4]-factor
+    zmin,zmax = boundary[2]+factor,boundary[5]-factor
+    xarr = np.arange(xmin,xmax,1)
+    yarr = np.arange(ymin,ymax,1)
+    zarr = np.arange(zmin,zmax,1)
+    V = np.meshgrid(xarr,yarr,zarr)
+    VV = np.reshape(V,[3,len(xarr)*len(yarr)*len(zarr)]) # all points in 3D
+    Space = {}
+    for v in VV.T:
+        Space[hash3D(v)] = 0 # this hashmap initialize all g values at 0
+    return Space
+
+if __name__ == "__main__":
+    from env3D import env
+    env = env(resolution=1)
+    Space = StateSpace(env.boundary,0)
+    t = np.array([3.0,4.0,5.0])
+    h = Heuristic(Space,t)
+    print(h[hash3D(t)])
\ No newline at end of file
diff --git 3D/env3D.py Astar_3D/env3D.py
rename from 3D/env3D.py
rename to Astar_3D/env3D.py
diff --git 3D/plot_util3D.py Astar_3D/plot_util3D.py
rename from 3D/plot_util3D.py
rename to Astar_3D/plot_util3D.py
